# Defining an accessable reverse-proxy point named client
upstream client {
  server client:3000; # 'client' is the name of our service defined in docker-compose
                      # That is where our react application running on the port 3000.
}

# Defining an accessable reverse-proxy point named api
upstream api {
  server api:5000; # 'api' defined in the docker-compose file as our Express service
                   # It is running on the port 5000, so we specified it adress there along with the name.
}

# Defining the base server, nginx
server {
  listen 80; # Will work on default port, 80

  # Defining routing rule for path '/'
  location / {
    proxy_pass http://client; # Will be routed to our 'client' upstream which is defined above
  }

  # Defining routing rule for path '/api'
  location /api {
    rewrite /api/(.*) /$1 break; # Since our Express routes does not have '/api' part defined in it
                                 # '/api/values/all' will be transformed to '/values/all'
                                 # This command will apply regex to URL, '(.*)' part will get match
                                 # and that will be available in '$1' variable
                                 # The break finalizes rewrite rules, if there is any other rewrite
                                 # below that, will not take effect.
    proxy_pass http://api; # Will be routed to our 'server' upstream which is defined above
  }

  location /sockjs-node { # React app's dev mode's websocket connection
    proxy_pass http://client;
    proxy_http_version 1.1; # Lines below are required for the websocket connection
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";

  }
}